/*
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.jenkins.plugins.containersecurity;

import static com.google.jenkins.plugins.containersecurity.util.TestUtil.assertFormValidationEquals;
import static com.google.jenkins.plugins.containersecurity.util.TestUtil.assertListBoxModelEquals;

import com.google.jenkins.plugins.containersecurity.VulnerabilityScanStep.DescriptorImpl;
import hudson.util.FormValidation;
import hudson.util.ListBoxModel;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.junit.MockitoJUnitRunner;

/** Tests {@link DescriptorImpl} for {@link VulnerabilityScanStep}. */
@RunWith(MockitoJUnitRunner.class)
public class VulnerabilityScanStepDescriptorTest {
  @Test
  public void testDoCheckTimeoutEmptyTimeout() {
    FormValidation expected =
        FormValidation.error(Messages.VulnerabilityScanStep_TimeoutRequired());
    FormValidation actual = descriptor().doCheckTimeout("");
    assertFormValidationEquals(expected, actual);
  }

  @Test
  public void testDoCheckTimeoutNaNTimeout() {
    FormValidation expected =
        FormValidation.error(Messages.VulnerabilityScanStep_TimeoutInvalid(30000));
    FormValidation actual = descriptor().doCheckTimeout("test");
    assertFormValidationEquals(expected, actual);
  }

  @Test
  public void testDoCheckTimeoutNegativeTimeout() {
    FormValidation expected =
        FormValidation.error(Messages.VulnerabilityScanStep_TimeoutInvalid(30000));
    FormValidation actual = descriptor().doCheckTimeout("-1000");
    assertFormValidationEquals(expected, actual);
  }

  @Test
  public void testDoCheckTimeoutZeroTimeout() {
    FormValidation expected =
        FormValidation.error(Messages.VulnerabilityScanStep_TimeoutInvalid(30000));
    FormValidation actual = descriptor().doCheckTimeout("0");
    assertFormValidationEquals(expected, actual);
  }

  @Test
  public void testDoCheckTimeoutSmallTimeout() {
    FormValidation expected =
        FormValidation.error(Messages.VulnerabilityScanStep_TimeoutInvalid(30000));
    FormValidation actual = descriptor().doCheckTimeout("3000");
    assertFormValidationEquals(expected, actual);
  }

  @Test
  public void testDoCheckTimeoutMinimumTimeout() {
    FormValidation expected = FormValidation.ok();
    FormValidation actual = descriptor().doCheckTimeout("30000");
    assertFormValidationEquals(expected, actual);
  }

  @Test
  public void testDoCheckTimeoutLargerTimeout() {
    FormValidation expected = FormValidation.ok();
    FormValidation actual = descriptor().doCheckTimeout("100000");
    assertFormValidationEquals(expected, actual);
  }

  @Test
  public void testDoFillSeverityThresholdItems() {
    ListBoxModel expected =
        new ListBoxModel()
            .add("UNSPECIFIED")
            .add("LOW")
            .add("MEDIUM")
            .add("HIGH")
            .add("CRITICAL")
            .add("IGNORE");
    ListBoxModel actual = descriptor().doFillSeverityThresholdItems();
    assertListBoxModelEquals(expected, actual);
  }

  @Test
  public void testDoCheckSeverityThresholdEmptySeverityThreshold() {
    FormValidation expected =
        FormValidation.error(Messages.VulnerabilityScanStep_SeverityThresholdRequired());
    FormValidation actual = descriptor().doCheckSeverityThreshold("");
    assertFormValidationEquals(expected, actual);
  }

  @Test
  public void testDoCheckSeverityThresholdInvalidSeverityThreshold() {
    FormValidation expected =
        FormValidation.error(Messages.VulnerabilityScanStep_SeverityThresholdInvalid("test"));
    FormValidation actual = descriptor().doCheckSeverityThreshold("test");
    assertFormValidationEquals(expected, actual);
  }

  @Test
  public void testDoCheckSeverityThresholdValid() {
    FormValidation expected = FormValidation.ok();
    FormValidation actual = descriptor().doCheckSeverityThreshold("HIGH");
    assertFormValidationEquals(expected, actual);
  }

  private DescriptorImpl descriptor() {
    return new DescriptorImpl();
  }
}
